// ImagaReaderRunner.java
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ImageProcessTest {
    /* store the bufferedImage of the goal image */
    private BufferedImage goalBufferedImage;
    /* store the bufferedImage of the image generated by ImplementImageIO */
    private BufferedImage myBufferedImage;

    /**
     * this method generate the bufferimage and store in the private members
     * for the goal image, it has existed, just using the imageIO read it and store
     * for the test image, using hte implementImageIO read and write in local
     * and then using the imageIO read the image
     */
    private void loadImage(String goalImagePath, String testImagePath) throws IOException{
        goalBufferedImage = ImageIO.read(new File(goalImagePath));

        ImplementImageIO test = new ImplementImageIO();
        Image image = test.myRead(goalImagePath);
        test.myWrite(image, testImagePath);

        myBufferedImage = ImageIO.read(new File(testImagePath + ".bmp"));
    }

    /**
     * this method test the width, height, and pixel 
     * between the goal image and the image generated by the implementprocessor
     */
    private void testPart() {
        int[] goalArray = new int[goalBufferedImage.getWidth() * goalBufferedImage.getHeight()];
        int[] myArray = new int[myBufferedImage.getWidth() * myBufferedImage.getHeight()];
        /* get each pixel and store in the array for comparing */
        goalBufferedImage.getRGB(0, 0, goalBufferedImage.getWidth(), goalBufferedImage.getHeight(), goalArray, 0, goalBufferedImage.getWidth());
        myBufferedImage.getRGB(0, 0, myBufferedImage.getWidth(), myBufferedImage.getHeight(), myArray, 0, myBufferedImage.getWidth());

        /* compare the width */
        assertEquals(goalBufferedImage.getWidth(), myBufferedImage.getWidth());
        /* compare the height */
        assertEquals(goalBufferedImage.getHeight(), myBufferedImage.getHeight());
        /* compare the pixel */
        assertArrayEquals(goalArray, myArray);
    }

    @Before
    public void setUp() throws Exception {

    }

    // test the red picture1 
    @Test
    public void testShowChanelR1() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/1_red_goal.bmp", "bmptest_v3/bmptest/test/1_red_test");
        testPart();
    }

    // test the green picture1
    @Test
    public void testShowChanelG1() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/1_green_goal.bmp", "bmptest_v3/bmptest/test/1_green_test");
        testPart();
    }

    // test the blue picture1
    @Test
    public void testShowChanelB1() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/1_blue_goal.bmp", "bmptest_v3/bmptest/test/1_blue_test");
        testPart();
    }

    // test the gray picture1
    @Test
    public void testShowGray1() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/1_gray_goal.bmp", "bmptest_v3/bmptest/test/1_gray_test");
        testPart();
    }
    
    // test the red picture2
    @Test
    public void testShowChanelR2() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/2_red_goal.bmp", "bmptest_v3/bmptest/test/2_red_test");
        testPart();
    }

    // test the green picture2
    @Test
    public void testShowChanelG2() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/2_green_goal.bmp", "bmptest_v3/bmptest/test/2_green_test");
        testPart();
    }

    // test the blue picture2
    @Test
    public void testShowChanelB2() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/2_blue_goal.bmp", "bmptest_v3/bmptest/test/2_blue_test");
        testPart();
    }

    // test the gray picture2
    @Test
    public void testShowGray2() throws IOException {
        loadImage("bmptest_v3/bmptest/goal/2_gray_goal.bmp", "bmptest_v3/bmptest/test/2_gray_test");
        testPart();
    }
}